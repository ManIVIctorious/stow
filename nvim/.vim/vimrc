""There are three types of options in Vim:
 "All of their values can be queried with "set <name>?"
""Boolean options:
 "         set with "<name>"
 "       unset with "no<name>"
 "      toggle with "<name>!"
""String and numeric options:
 "         set with "<name>=<value>"
""Array options:
 "         set with "<name>=<value>"
 "   add value with "<name>+=<value>"
 "remove value with "<name>-=<value>"

set nocompatible            "disable vi compatible mode
syntax on                   "enable Syntax Highlighting
filetype plugin on          "enable filetype detection
let mapleader = "\<Space>"  "set map leader

""An X11-aware Vim provides the two selection registers PRIMARY ("*) and CLIPBOARD ("+)
 "Most applications provide their current selection via PRIMARY "*
 "and use CLIPBOARD "+ for cut/copy/paste operations
  set clipboard=unnamedplus  "use CLIPBOARD register "+ for yank/delete/change/put operations

"{{{ Settings
  set wrap           "wrap line at end of window
  set linebreak      "wrap whole words
  set number         "display line numbers
  set splitright     "open new vertical splits on the right
  set showcmd        "display incomplete commands (bottom right)
  set hidden         "don't show an error message when switching from a modified buffer
  set wildmenu       "displays auto-completed command list on pressing wildchar (i.e. tab)
 "set wildignorecase "case insensitive completion in wildmenu
  set visualbell     "flash the buffer when encountering an error (e.g. invalid movement)
 "set scrolloff=999  "keep cursor on the middle line as long as possible (default: so=0)


 "Search (:h /, magic, pattern-overview)
  set ignorecase     "ignore case when using a search pattern
  set smartcase      "caps sensitive when upper-case in search pattern
  set incsearch      "Incremental search -> search as you type

 "Settings for tabulators and indentation (:h tabstop, autoindent)
  set tabstop=4      "number of spaces a "\t" in the text counts for
  set shiftwidth=4   "number of spaces used for each step of indent (>>,<<,etc.)
  set smarttab       "backspace removes up to <shiftwidth> spaces at start of line
  set expandtab      "expand tabs to spaces
  set autoindent     "copy indent from current line when starting a new line
  set smartindent    "smarter indentation in case of C-like source-code
  set breakindent    "on line wrap the "display-lines" are indented too

 "Show invisibles (e.g. tabs, EOL, etc.) (:h 'list') and provide a list of
 " displayed hidden characters and their accompanying symbols (:h 'listchars')
  set list
  set listchars =tab:--→
  set listchars+=nbsp:␣
  set listchars+=trail:•
  set listchars+=extends:⟩
  set listchars+=precedes:⟨
  "set listchars+=eol:↲

 "Don't flush terminal after closing vim (:h terminal-info, terminal-options)
  set t_ti= t_te=

 "Define how automatic formatting is done (:h 'formatoptions', fo-table)
  set formatoptions=tcrqj

 "Text folding (:h folding, fold-methods, fold-commands)
  set foldmethod=marker   "Set foldmethod to marker (using foldmarker and commentstring)
  set foldcolumn=0        "Show folding column of width <set foldcolumn?> on the left

 "Spell checking (:h spell)
 "Enable spell checking in GUI-Mode
  if has("gui_running") | set spell | else | set nospell | endif
 "Set spell files and accepted languages (:h spell-quickstart)
  set spelllang=en_gb,de_at
  set spellfile=~/.vim/spell/en.utf-8.add,~/.vim/spell/de.utf-8.add

 "Autocompletion settings (:h ins-completion, 'completeopt')
 "Just show completion popup instead of directly inserting the first match
  set completeopt+=longest

 "Display as much as possible of the last line in a window (:h 'display')
  set display+=truncate

 "Increase maximum number of tabs
  set tabpagemax=100

 "Set number formats besides decimal, bin (0b), hex (0x), alpha [a-zA-Z]
  set nrformats=bin,hex,alpha

 "List of sideways moving keys allowed to traverse line breaks
  set whichwrap=b,s,[,]

 "Enable mouse usage (:h mouse)
  set mouse=a        "enable mouse selection in all modes as well as terminal
  set mousefocus     "focus follows mouse in split-view

 "Change cursor shape on mode switch:
  "{{{
  " 1 -> blinking block
  " 2 -> solid block
  " 3 -> blinking underscore
  " 4 -> solid underscore
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
  "}}}
  let &t_SI = "\<Esc>[5 q" "SI = INSERT mode
  let &t_SR = "\<Esc>[4 q" "SR = REPLACE mode
  let &t_EI = "\<Esc>[1 q" "EI = NORMAL mode (ELSE)
"}}}
"{{{ Add persistent undo and swapdir
 "persistent undo
  let vimCache = '$HOME/.cache/vim'
 "keep undo history across sessions by storing it in a file
  if has('persistent_undo')
    let myUndoDir = expand(vimCache . '/undodir')   "define path
    call system('mkdir -p ' . myUndoDir)            "make   path
    let &undodir = myUndoDir                        "set    path
    set undofile
  endif
  set undolevels=10000  "maximum number of changes that can be undone
  set undoreload=10000  "maximum number lines to save for undo on a buffer reload
 "swap dir
  let mySwapDir = expand(vimCache . '/swap//')      "define path
  call system('mkdir -p ' . mySwapDir)              "make   path
  let &directory = mySwapDir                        "set    path
 "}}}
"{{{ Key-maps and key-remaps (:h key-mapping, map-overview)
 "edit vimrc
  nnoremap <leader>e    :edit $MYVIMRC<CR>

 "switch cwd to the directory of the open buffer (:h filename-modifiers)
  nnoremap <leader>cd   :cd %:p:h<CR>:pwd<CR>

 "call :make
  nnoremap <leader>m    :make<CR>

 "copy whole content to clipboard
  nnoremap <leader>y    :%y+<CR>

 "edit file in multiple columns
  noremap <silent> <Leader>vs :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>

 "evaluate expression with expression register
  nnoremap <leader>s 0yt=f=a<C-r>=<C-r>0<CR><Esc>

 "copy to end of line with "Y"
  nnoremap Y y$

 "stay in visual mode after using ">" or "<" for visual indentation
  vnoremap < <gv
  vnoremap > >gv

 "automatically close parenthesis, quotes, etc. (:h i_CTRL-G_U)
 "(single quotes interfere with words like e.g. don't)
 "inoremap <expr> '   "''\<c-g>U\<left>"
  inoremap <expr> " "\"\"\<c-g>U\<left>"
  inoremap <expr> (   "()\<c-g>U\<left>"
  inoremap <expr> [   "[]\<c-g>U\<left>"
  inoremap <expr> {   "{}\<c-g>U\<left>"

 "use |/_ to set the current window width/height widest/highest possible
  nnoremap \| <C-w>\|
  nnoremap _  <C-w>_

 "remove Blank Lines Command
  command! -range=% RBL :<line1>,<line2>g/^\s*$/d

 "faster buffer switching with  <C-p>, <C-n> and gb (bufferlist)
  nnoremap gb               :ls<CR>:b<Space>
  nnoremap <C-p>            :bp<CR>
  nnoremap <C-n>            :bn<CR>
  nnoremap <leader>#        :b#<CR>

 "use "<C>" as modifier to work on displayed lines instead of numbered lines
 "<C-^> and <C-$> are not really possible to type therefore, g^ and g$ have to be used
 "{{{
   noremap <C-Up>    gk
   noremap <C-k>     gk
   noremap <C-Down>  gj
   noremap <C-j>     gj
   noremap <C-Home>  g^
   noremap <C-End>   g$
  inoremap <C-Up>    <Esc>gka
  inoremap <C-Down>  <Esc>gja
  inoremap <C-Home>  <Esc>g^i
  inoremap <C-End>   <Esc>g$a
 "}}}

 "move between split-windows by hitting "alt+{arrow-keys}"
 "(unfortunately alt+{h,j,k,l} don't get sent to vim properly)
 "{{{
   noremap <leader>h      <C-w>h
   noremap <leader>j      <C-w>j
   noremap <leader>k      <C-w>k
   noremap <leader>l      <C-w>l
   noremap <M-Left>       <C-w>h
   noremap <M-Down>       <C-w>j
   noremap <M-Up>         <C-w>k
   noremap <M-Right>      <C-w>l
 "}}}
"}}}
"{{{ Plugins

 ""Minpac package manager
  "Initial installation (requires Linux, git, Vim >= 8.0):
  "  git clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac

  "Iniatialise package manager and add :PackUpdate and :PackClean commands to
  "install/update and uninstall packages
   packadd minpac   "(:h minpac.txt)
   call minpac#init()
   call minpac#add('k-takata/minpac', {'type': 'opt'})
   command! PackUpdate call minpac#update()
   command! PackClean  call minpac#clean()

 ""Installed packages
  "Solarized Colorscheme (:h solarized)
   call minpac#add('altercation/vim-colors-solarized')

  "Fugitive git integration (:h fugitive)
   call minpac#add('tpope/vim-fugitive')

  "Ultisnips (:h UltiSnips, UltiSnips-basic-syntax)
   call minpac#add('SirVer/ultisnips')
    "Map UltiSnips completion to <C-j> (default is <Tab>)
     let g:UltiSnipsExpandTrigger       = '<C-j>'
     let g:UltiSnipsJumpForwardTrigger  = '<C-j>'
     let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

  "Highlighted Yank
   call minpac#add('machakann/vim-highlightedyank')

  "Nerdtree with git plugin (:h NERDTree-contents)
   call minpac#add('preservim/nerdtree')
   call minpac#add('Xuyuanp/nerdtree-git-plugin')
    "Map :NERDTreeToggle to <leader>n
     noremap <leader>n :NERDTreeToggleVCS<CR>

  "Sved (Synchronize Vim Evince) (:h sved)
""   call minpac#add('peterbjorgensen/sved')
    "Map latex forward search with evince by <leader>f
""     nnoremap <leader>f :call SVED_Sync()<CR>

"  call minpac#add('ycm-core/YouCompleteMe')             "(:h youcompleteme-contents)

  "Gundo (:h Gundo-contents)
   call minpac#add('sjl/gundo.vim')
    "Map :GundoToggle to <F4>
     if has("python3") | let g:gundo_prefer_python3 = 1 | endif
     nnoremap <F4> :GundoToggle<CR>
"}}}

"Set GUI and terminal appearance
 if has("gui_running")
   colorscheme solarized        "GUI colorscheme
   set background=light         "possible values for solarized: light/dark
   set guifont=Monospace\ 11    "to set interactively type 'set guifont=*' in gvim
 else
   colorscheme elflord          "terminal colorscheme
 endif

""Settings for special circumstances
 "While file system specific settings can be enabled via autocmd FileType
 "a cleaner way is to set the respective filetypeplugins (:h vimruntime)
 if has("autocmd")
 "automatically source your vimrc when writing its buffer to file
   autocmd bufwritepost $MYVIMRC source $MYVIMRC

 "change work-dir to current file's parent directory (:h filename-modifiers)
   autocmd VimEnter * cd %:p:h
   autocmd GuiEnter * cd %:p:h

   "set omnifunc=syntaxcomplete#Complete
 endif
